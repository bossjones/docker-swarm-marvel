# -*- coding: utf-8 -*-
# USAGE: ansible-playbook -vvv create-droplets.yml -i ./inventory-marvel-dyninv/ --skip-tags "pause"
---
##############################################################################
# file: create-droplets.yml
# Creates digital ocean droplet
#
# Run with:
#
# Flush dynamic inventory cache:
# ansible-playbook -vvv create-droplets.yml -i ./inventory-marvel-dyninv/ --flush-cache
#
# DRY RUN(with pause):
# ansible-playbook -vvv create-droplets.yml -i ./inventory-marvel-dyninv/ --check
#
# REAL RUN(w/o pause):
# ansible-playbook -vvv create-droplets.yml -i ./inventory-marvel-dyninv/ --skip-tags "pause"
#
# TAG LOOKUP:
# ansible-playbook -vvv create-droplets.yml -i ./inventory-marvel-dyninv/ --tag lookup
#
# REAL RUN:
# ansible-playbook -vvv create-droplets.yml -i ./inventory-marvel-dyninv/
#
##############################################################################

- hosts: localhost
  connection: local
  gather_facts: false
  # vars_prompt:
  # - name: "elb_type"
  #   prompt: "Type of load balancer we want to create and add to proxy in ethos cluster"
  #   private: no
  # - name: "app_name"
  #   prompt: "Name of app, must match value in group_vars aws_elb_app_vars"
  #   private: no
  # - name: "tier"
  #   prompt: "AWS account tier"
  #   private: no
  # - name: "elb_region"
  #   prompt: "Region to put elb in. options [ue1, uw1, uw2]"
  #   private: no
  # - name: "service_type"
  #   prompt: "Enter a service type for this elb. options [ethos_v2, ethos_v3, generic]"
  #   private: no
  # vars_files:
  #   - "./vars/aws_generic.yml"
  #   - "./vars/elb_vars/{{ app_name }}/elb_{{ app_name }}_{{ tier }}.yml"
  roles:
     - ansible-role-droplet

  pre_tasks:

    - name: Fail if Ansible is ancient
      fail: msg="We need Ansible >= 2.0. Please update your kit. 'pip install -U Ansible'"
      when: ansible_version.major < 2
      tags:
        - always

    - name: Include vars from local-configure.yml if found
      include_vars: "{{ item }}"
      with_first_found:
       - local-configure.yml
       - null.yml

    # --------------------- STEPS -------------------------------
    # 1. Figure out which droplets exist already (?)
    # 2. Find all ssh keys that we plan on using, put them in comma seperated form
    # 3. Create the droplets that don't exist
    # 4. Find a firewall that has already be defined by name
    # 5. merge the firewall rules together w/ what exists, and what was just created, make sure it contains new ips and new droplet ids as well
    # 6. (optional) At some point in the future, we'll need to create a smart prune task, that will remove stale ip addresses from firewall rules
    # 7. Update firewall rules
    # 8. Test ssh connectivity
    # 9. Make sure this is done serially?

    # ---------------
    # source: https://github.com/holms/ansible-coreos/blob/a37d7e493ff3712d4c4155cc45044abd655bbbec/roles/coreos/tasks/do.yml
    # - name: Digital Ocean | Get ssh key id's
    #   uri:
    #     url: "https://api.digitalocean.com/v2/account/keys"
    #     HEADER_Authorization: Bearer {{ lookup('env','DIGITALOCEAN_ACCESS_TOKEN') }}
    #     status_code: 200
    #   register: ssh_keys

# Afterwards, try to ssh and connect
- hosts: do
  remote_user: root
  gather_facts: false

  pre_tasks:

    - name: Fail if Ansible is ancient
      fail: msg="We need Ansible >= 2.0. Please update your kit. 'pip install -U Ansible'"
      when: ansible_version.major < 2
      tags:
        - always

    - name: Include vars from local-configure.yml if found
      include_vars: "{{ item }}"
      with_first_found:
       - local-configure.yml
       - null.yml

  tasks:
    - name: Wait for port 22 to become available.
      local_action: "wait_for port=22 host={{ inventory_hostname }}"

    - name: Install tcpdump.
      yum: name=tcpdump state=present


### DISABLED #     - name: Digital Ocean | Get nodes
### DISABLED #       uri:
### DISABLED #         url: "https://api.digitalocean.com/v2/droplets"
### DISABLED #         HEADER_Authorization: Bearer {{ lookup('env','DIGITALOCEAN_ACCESS_TOKEN') }}
### DISABLED #         status_code: 200
### DISABLED #       register: droplet_nodes
### DISABLED #
### DISABLED #     - name: "PRINT droplet_nodes - BEFORE"
### DISABLED #       debug:
### DISABLED #         msg: "{{ droplet_nodes }}"
### DISABLED #       when: droplet_nodes is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - droplet_nodes
### DISABLED #
### DISABLED #     # - name: "Extract droplet information"
### DISABLED #     #   set_fact: do_droplets_with_ip="{{ result_droplets | json_query(droplet_query) }}"
### DISABLED #     #   vars:
### DISABLED #     #     droplet_query: "results[*].{ ip: droplet.ip_address, port: item.port, name: droplet.name, user: item.user, ssh_key_name: item.ssh_key_name }"
### DISABLED #     #   changed_when: no
### DISABLED #
### DISABLED #     - name: "PRINT {{ item }}"
### DISABLED #       debug:
### DISABLED #         msg: "{{ item.name }}"
### DISABLED #       when: droplet_nodes is defined
### DISABLED #       with_items: "{{ droplet_nodes.json.droplets }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - droplet_nodes
### DISABLED #
### DISABLED #     - name: "CREATE existing_droplets_by_name fact with empty array"
### DISABLED #       set_fact: existing_droplets_by_name="[]"
### DISABLED #       check_mode: no
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - existing_droplets_by_name
### DISABLED #
### DISABLED #     - name: "POPULATE existing_droplets_by_name fact, which contains array of SUBNET ids"
### DISABLED #       set_fact: existing_droplets_by_name="{{existing_droplets_by_name}} + ['{{ item.name }}']"
### DISABLED #       when: item is defined
### DISABLED #       check_mode: no
### DISABLED #       with_items:
### DISABLED #         - "{{ droplet_nodes.json.droplets }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - existing_droplets_by_name
### DISABLED #
### DISABLED #     - name: 'PRINT existing_droplets_by_name={{ item }}'
### DISABLED #       debug:
### DISABLED #         msg: "{{ existing_droplets_by_name }}"
### DISABLED #       when: existing_droplets_by_name is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - droplet_nodes
### DISABLED #
### DISABLED #     # - name: wait 1 minute before continuing forward.
### DISABLED #     #   pause: minutes=1
### DISABLED #
### DISABLED #     # ---------------
### DISABLED #
### DISABLED #     # FIXME: turn this into a uri call just like the droplets play above
### DISABLED #     - name: Get existing doctl_ssh_keys
### DISABLED #       shell: "doctl compute ssh-key ls | grep -v 'ID         Name               FingerPrint'"
### DISABLED #       register: doctl_ssh_keys_results
### DISABLED #       check_mode: no
### DISABLED #       # Since this is just a command that looks up files on your system, don't mark it as a change everytime we run this
### DISABLED #       changed_when: False
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "PRINT doctl_ssh_keys_results - BEFORE"
### DISABLED #       debug:
### DISABLED #         msg: "{{ doctl_ssh_keys_results }}"
### DISABLED #       when: doctl_ssh_keys_results is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: 'PRINT results from elb_vars find shell command'
### DISABLED #       debug:
### DISABLED #         msg: "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_elb_vars
### DISABLED #
### DISABLED #     - name: 'Put together application names using jinja2 filter splittext'
### DISABLED #       debug:
### DISABLED #         msg: "{{ item | splitext | string }}"
### DISABLED #       with_items: "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_elb_vars
### DISABLED #
### DISABLED #     - name: 'run: item.split(" ")[0]'
### DISABLED #       debug:
### DISABLED #         msg: "{{ item.split(' ')[0] }}"
### DISABLED #       with_items: "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_elb_vars
### DISABLED #
### DISABLED #
### DISABLED #     - name: "CREATE ssh_key_ids fact with empty array"
### DISABLED #       set_fact: ssh_key_ids="[]"
### DISABLED #       check_mode: no
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "PRINT ssh_key_ids - BEFORE"
### DISABLED #       debug:
### DISABLED #         msg: "{{ ssh_key_ids }}"
### DISABLED #       when: ssh_key_ids is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "POPULATE ssh_key_ids fact, which contains array of SUBNET ids"
### DISABLED #       set_fact: ssh_key_ids="{{ssh_key_ids}} + ['{{ item.split(' ')[0] }}']"
### DISABLED #       when: item is defined
### DISABLED #       check_mode: no
### DISABLED #       with_items:
### DISABLED #         - "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "PRINT ssh_key_ids - AFTER"
### DISABLED #       debug:
### DISABLED #         msg: "{{ ssh_key_ids }}"
### DISABLED #       when: ssh_key_ids is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED # # ---------------
### DISABLED # # ---------------
### DISABLED # # ---------------
### DISABLED # # ---------------
### DISABLED # # ---------------
### DISABLED # # ---------------
### DISABLED # # ------------
### DISABLED #
### DISABLED # # TODO: USE THIS
### DISABLED # # - name: "Create droplets"
### DISABLED # #   digital_ocean:
### DISABLED # #     backups_enabled: "{{ item.backups_enabled | default('no') }}"
### DISABLED # #     command: droplet
### DISABLED # #     image_id: "{{ item.image_id | default('ubuntu-16-04-x64') }}"
### DISABLED # #     name: "{{ item.name }}"
### DISABLED # #     private_networking: "{{ item.private_networking | default('no') }}"
### DISABLED # #     region_id: "{{ item.region_id | default('fra1') }}"
### DISABLED # #     size_id: "{{ item.size_id | default('512mb') }}"
### DISABLED # #     ssh_key_ids: "{{ ssh_keys | json_query('results[*].ssh_key') | selectattr('name', 'equalto', item.ssh_key_name) | map(attribute='id') | list }}"
### DISABLED # #     state: active
### DISABLED # #     unique_name: yes
### DISABLED # #     user_data: "{{ lookup('template', 'user-data.j2') | trim }}"
### DISABLED # #     virtio: "{{ item.virtio | default('yes') }}"
### DISABLED # #     wait: "{{ item.wait | default('yes') }}"
### DISABLED # #     wait_timeout: "{{ item.wait_timeout | d(600) }}"
### DISABLED # #   with_items: "{{ do_droplets }}"
### DISABLED # #   register: result_droplets
### DISABLED #
### DISABLED # # - name: "Extract droplet information"
### DISABLED # #   set_fact: do_droplets_with_ip="{{ result_droplets | json_query(droplet_query) }}"
### DISABLED # #   vars:
### DISABLED # #     droplet_query: "results[*].{ ip: droplet.ip_address, port: item.port, name: droplet.name, user: item.user, ssh_key_name: item.ssh_key_name }"
### DISABLED # #   changed_when: no
### DISABLED #
### DISABLED # # --------------------------------------------------------------------------------
### DISABLED # # Return ids of droplets
### DISABLED # # --------------------------------------------------------------------------------
### DISABLED #
### DISABLED #     - name: Get existing doctl_ssh_keys
### DISABLED #       shell: "doctl compute ssh-key ls | grep -v 'ID         Name               FingerPrint'"
### DISABLED #       register: doctl_ssh_keys_results
### DISABLED #       check_mode: no
### DISABLED #       # Since this is just a command that looks up files on your system, don't mark it as a change everytime we run this
### DISABLED #       changed_when: False
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "PRINT doctl_ssh_keys_results - BEFORE"
### DISABLED #       debug:
### DISABLED #         msg: "{{ doctl_ssh_keys_results }}"
### DISABLED #       when: doctl_ssh_keys_results is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: 'PRINT results from elb_vars find shell command'
### DISABLED #       debug:
### DISABLED #         msg: "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_elb_vars
### DISABLED #
### DISABLED #     - name: 'Put together application names using jinja2 filter splittext'
### DISABLED #       debug:
### DISABLED #         msg: "{{ item | splitext | string }}"
### DISABLED #       with_items: "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_elb_vars
### DISABLED #
### DISABLED #     - name: 'run: item.split(" ")[0]'
### DISABLED #       debug:
### DISABLED #         msg: "{{ item.split(' ')[0] }}"
### DISABLED #       with_items: "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - get_elb_vars
### DISABLED #
### DISABLED #
### DISABLED #     - name: "CREATE ssh_key_ids fact with empty array"
### DISABLED #       set_fact: ssh_key_ids="[]"
### DISABLED #       check_mode: no
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "PRINT ssh_key_ids - BEFORE"
### DISABLED #       debug:
### DISABLED #         msg: "{{ ssh_key_ids }}"
### DISABLED #       when: ssh_key_ids is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "POPULATE ssh_key_ids fact, which contains array of SUBNET ids"
### DISABLED #       # NOTE: convert "/Users/malcolm/dev/behanceops/ansible/vars/elb_vars//inbox/stage/elb_inbox_stage.yml" to "inbox"
### DISABLED #       set_fact: ssh_key_ids="{{ssh_key_ids}} + ['{{ item.split(' ')[0] }}']"
### DISABLED #       when: item is defined
### DISABLED #       check_mode: no
### DISABLED #       with_items:
### DISABLED #         - "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #
### DISABLED #     - name: "PRINT ssh_key_ids - AFTER"
### DISABLED #       debug:
### DISABLED #         msg: "{{ ssh_key_ids }}"
### DISABLED #       when: ssh_key_ids is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED # # --------------------------------------------------------------------------------
### DISABLED # #
### DISABLED # # --------------------------------------------------------------------------------
### DISABLED #
### DISABLED #
### DISABLED # # ---------------
### DISABLED #
### DISABLED #
### DISABLED #     - name: "tag a resource; creating the tag if it does not exists {{ item }}"
### DISABLED #       debug:
### DISABLED #         msg: "{{ item }}"
### DISABLED #       when: do_tags_to_create is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #       with_items:
### DISABLED #         - "{{do_tags_to_create}}"
### DISABLED #
### DISABLED #     - name: "tag a resource; creating the tag if it does not exists {{ item }}"
### DISABLED #       digital_ocean_tag:
### DISABLED #         name: "{{ item }}"
### DISABLED #         state: present
### DISABLED #       with_items:
### DISABLED #         - "{{do_tags_to_create}}"
### DISABLED #       when: do_tags_to_create is defined
### DISABLED #
### DISABLED #     # - name: wait 5 minute before creating droplet.
### DISABLED #     #   pause: minutes=5
### DISABLED #
### DISABLED #     - name: "Create droplets {{ item.value.name }}"
### DISABLED #       digital_ocean:
### DISABLED #         backups_enabled: "{{ item.value.backups_enabled | default('no') }}"
### DISABLED #         command: droplet
### DISABLED #         image_id: "{{ item.value.image_id | default('fedora-24-x64') }}"
### DISABLED #         name: "{{ item.value.name }}"
### DISABLED #         private_networking: "{{ item.value.private_networking | default('no') }}"
### DISABLED #         region_id: "{{ item.value.region_id | default('nyc3') }}"
### DISABLED #         size_id: "{{ item.value.size_id | default('512mb') }}"
### DISABLED #         # ssh_key_ids: "{{ ssh_keys | json_query('results[*].ssh_key') | selectattr('name', 'equalto', item.value.ssh_key_name) | map(attribute='id') | list }}"
### DISABLED #         ssh_key_ids: "{{ ssh_key_ids }}"
### DISABLED #         state: "{{ item.value.state }}"
### DISABLED #         virtio: "{{ item.value.virtio | default('yes') }}"
### DISABLED #         wait: "{{ item.value.wait | default('yes') }}"
### DISABLED #         wait_timeout: "{{ item.value.wait_timeout | d(600) }}"
### DISABLED #       with_dict: "{{ avenger_servers }}"
### DISABLED #       when: "{{ item.value.name not in existing_droplets_by_name }}"
### DISABLED #       register: result_droplets
### DISABLED #
### DISABLED #     - name: "PRINT var result_droplets"
### DISABLED #       debug:
### DISABLED #         msg: "{{ result_droplets }}"
### DISABLED #       when: result_droplets is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #
### DISABLED # # ssh_keys | json_query('results[*].ssh_key') | selectattr('name', 'equalto', item.value.ssh_key_name) | map(attribute='id') | list
### DISABLED #
### DISABLED #
### DISABLED #
### DISABLED #     - name: "CREATE droplet_info fact with empty array"
### DISABLED #       set_fact: droplet_info="[]"
### DISABLED #       check_mode: no
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "PRINT droplet_info - BEFORE"
### DISABLED #       debug:
### DISABLED #         msg: "{{ droplet_info }}"
### DISABLED #       when: droplet_info is defined
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #     - name: "POPULATE droplet_info fact"
### DISABLED #       set_fact: droplet_info="{{droplet_info}} + ['{{ droplet_nodes.json.droplets | json_query('droplets[*].ssh_key') }}']"
### DISABLED #       when: item is defined
### DISABLED #       check_mode: no
### DISABLED #       with_items:
### DISABLED #         - "{{ doctl_ssh_keys_results.stdout_lines }}"
### DISABLED #       tags:
### DISABLED #         - lookup
### DISABLED #         - debug
### DISABLED #         - do_lookup
### DISABLED #         - set_fact
### DISABLED #         - doctl_ssh_keys
### DISABLED #
### DISABLED #
### DISABLED # # source: https://github.com/zchen93/Algo/blob/0bb92790945df438780ec9d50ce091889d97a8c7/roles/cloud-digitalocean/tasks/main.yml#L43
### DISABLED #
### DISABLED # #   tasks:
### DISABLED # #     - name: Create new Droplet.
### DISABLED # #       digital_ocean:
### DISABLED # #         state: present
### DISABLED # #         command: droplet
### DISABLED # #         name: ansible-test
### DISABLED # #         private_networking: yes
### DISABLED # #         size_id: 512mb
### DISABLED # #         image_id: centos-7-0-x64
### DISABLED # #         region_id: nyc2
### DISABLED # #         # Customize this for your account.
### DISABLED # #         ssh_key_ids: 138954
### DISABLED # #         # Required for idempotence/only one droplet creation.
### DISABLED # #         unique_name: yes
### DISABLED # #       register: do
### DISABLED #
### DISABLED # #     - name: Add new host to our inventory.
### DISABLED # #       add_host:
### DISABLED # #         name: "{{ do.droplet.ip_address }}"
### DISABLED # #         groups: do
### DISABLED # #       when: do.droplet is defined
### DISABLED #
### DISABLED # # - hosts: do
### DISABLED # #   remote_user: root
### DISABLED # #   gather_facts: false
### DISABLED #
### DISABLED # #   tasks:
### DISABLED # #     - name: Wait for port 22 to become available.
### DISABLED # #       local_action: "wait_for port=22 host={{ inventory_hostname }}"
### DISABLED #
### DISABLED # #     - name: Install tcpdump.
### DISABLED # #       yum: name=tcpdump state=present
