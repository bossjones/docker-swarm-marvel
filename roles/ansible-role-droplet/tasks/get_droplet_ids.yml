---
# Make fact containing just info on droplet name, and droplet id:
# jq -r '.msg.json.droplets[]| {name: .name, id: .id}' < /Users/user/dev/bossjones/docker-swarm-marvel/static/droplets_response.json

- name: "CREATE servers_list_by_name fact with empty array"
  set_fact: servers_list_by_name="[]"
  check_mode: no
  tags:
    - lookup
    - debug
    - do_lookup
    - set_fact
    - doctl_ssh_keys

- name: "POPULATE servers_list_by_name fact"
  set_fact: servers_list_by_name="{{servers_list_by_name}} + ['{{ item.value.name }}']"
  when: item is defined and item.value.name is defined
  check_mode: no
  with_dict: "{{ avenger_servers }}"
  tags:
    - lookup
    - debug
    - do_lookup
    - set_fact
    - doctl_ssh_keys

- name: 'PRINT servers_list_by_name'
  debug:
    msg: "{{ servers_list_by_name }}"
  when: servers_list_by_name is defined
  tags:
    - lookup
    - debug
    - do_lookup
    - servers_list_by_name

- name: Digital Ocean | Get nodes
  uri:
    url: "https://api.digitalocean.com/v2/droplets"
    HEADER_Authorization: Bearer {{ lookup('env','DIGITALOCEAN_ACCESS_TOKEN') }}
    status_code: 200
  register: droplet_nodes

- name: 'Set {{ playbook_dir }}/static/droplets_response.json'
  template: src={{role_path}}/templates/generic_json.json.j2 dest={{ playbook_dir }}/static/droplets_response.json
  vars:
    # NOTE: This gets rid of unicode characters inside of the json doc
    generic_json: "{{ droplet_nodes | to_nice_json }}"
  delegate_to: localhost

- name: '/bin/cat {{ playbook_dir }}/static/droplets_response.json'
  shell: "/bin/cat {{ playbook_dir }}/static/droplets_response.json"
  register: droplets_response
  check_mode: no
  # Since this is just a command that looks up files on your system, don't mark it as a change everytime we run this
  changed_when: False
  tags:
    - lookup
    - debug
    - do_lookup
    - droplets_response

- name: "PRINT droplets_response"
  debug:
    msg: "{{ droplets_response.stdout }}"
  when: droplets_response is defined
  tags:
    - lookup
    - debug
    - do_lookup
    - droplets_response

- name: "PRINT droplet_nodes"
  debug:
    msg: "{{ droplet_nodes }}"
  when: droplet_nodes is defined
  tags:
    - lookup
    - debug
    - do_lookup
    - droplet_nodes

##############################################################

# source: https://stackoverflow.com/questions/31895602/ansible-filter-a-list-by-its-attributes

#  |2.2.3|  using virtualenv: docker-swarm-marvel2  hyenatop in ~/dev/bossjones/docker-swarm-marvel
# ± |feature-inital U:5 ?:3 ✗| → jq -r '[.msg.json.droplets[]| {name: .name, id: .id}]' < /Users/user/dev/bossjones/docker-swarm-marvel/static/droplets_response.json
# [
#   {
#     "scarlettnet.dark.io": 4536436
#   },
#   {
#     "scarlett-travis": 34645345
#   }
# ]

# NOTE: This is the one we wanted
#  |2.2.3|  using virtualenv: docker-swarm-marvel2  hyenatop in ~/dev/bossjones/docker-swarm-marvel
# ± |feature-inital U:5 ?:3 ✗| → jq -r '[.msg.json.droplets[]| [{name: .name, id: .id}]]' < ./static/droplets_response.json
# [
#   [
#     {
#       "name": "scarlettnet.dark.io",
#       "id": 4353453
#     }
#   ],
#   [
#     {
#       "name": "scarlett-travis",
#       "id": 4356436
#     }
#   ]
# ]

- name: "jq -r '[.msg.json.droplets[]| [{name: .name, id: .id}]]' < {{ playbook_dir }}/static/droplets_response.json"
  shell: >
    jq -r '[.msg.json.droplets[]| [{name: .name, id: .id}]]' < {{ playbook_dir }}/static/droplets_response.json
  register: droplet_name_and_id_only
  check_mode: no
  # Since this is just a command that looks up files on your system, don't mark it as a change everytime we run this
  changed_when: False
  tags:
    - lookup
    - debug
    - do_lookup
    - droplet_name_and_id_only

# source: https://stackoverflow.com/questions/31895602/ansible-filter-a-list-by-its-attributes
- name: 'PRINT droplet_name_and_id_only.stdout BY ITEM'
  debug:
    msg: "{{ item }}"
  with_items: "{{ droplet_name_and_id_only.stdout }}"
  tags:
    - lookup
    - debug
    - do_lookup
    - droplet_name_and_id_only

# - name: pause to see that everything is good
#   pause: minutes=1

- name: "CREATE fact_droplet_name_and_id_only fact with empty array"
  set_fact: fact_droplet_name_and_id_only="[{{ droplet_name_and_id_only.stdout }}]"
  check_mode: no
  tags:
    - lookup
    - debug
    - do_lookup
    - set_fact
    - doctl_ssh_keys

- name: 'PRINT fact_droplet_name_and_id_only'
  debug:
    msg: "{{ fact_droplet_name_and_id_only }}"
  tags:
    - lookup
    - debug
    - do_lookup
    - fact_droplet_name_and_id_only

# - name: pause to see that everything is good
#   pause: minutes=1

# NOTE: Example contents of fact_droplet_name_and_id_only
# TASK [ansible-role-droplet : PRINT fact_droplet_name_and_id_only] **************
# task path: /Users/user/dev/bossjones/docker-swarm-marvel/roles/ansible-role-droplet/tasks/get_droplet_ids.yml:121
# ok: [localhost] => {
#     "msg": [
#         [
#             [
#                 {
#                     "id": 4320917,
#                     "name": "scarlettnet.dark.io"
#                 }
#             ],
#             [
#                 {
#                     "id": 54418445,
#                     "name": "scarlett-travis"
#                 }
#             ]
#         ]
#     ]
# }

- name: 'PRINT fact_droplet_name_and_id_only|get_var_type'
  debug:
    msg: "{{ fact_droplet_name_and_id_only| get_var_type }}"
  tags:
    - lookup
    - debug
    - do_lookup
    - fact_droplet_name_and_id_only

- name: 'PRINT fact_droplet_name_and_id_only|item|iterable'
  debug:
    msg: "{{ item is iterable }}"
  with_items: "{{ fact_droplet_name_and_id_only}}"
  tags:
    - lookup
    - debug
    - do_lookup
    - fact_droplet_name_and_id_only

- name: 'PRINT fact_droplet_name_and_id_only|item|iterable'
  debug:
    msg: "{{ item is mapping }}"
  with_items: "{{ fact_droplet_name_and_id_only}}"
  tags:
    - lookup
    - debug
    - do_lookup
    - fact_droplet_name_and_id_only

# # # Create a fact containing ONLY the droplet ids that match the names found in avenger_servers variable
# - name: "CREATE FACT [matching_droplet_ids_only]"
#   set_fact:
#     matching_droplet_ids_only: |
#       {% set res = [] -%}
#       {%- for i in item -%}
#         {% if i.name in servers_list_by_name -%}
#           {% set ignored = res.append(i.id|int) -%}
#         {%- endif %}
#       {%- endfor %}
#       {{ res }}
#   with_items: "{{ fact_droplet_name_and_id_only}}"
#   check_mode: no
#   tags:
#     - lookup
#     - debug
#     - do_lookup
#     - set_fact

# # Create a fact containing ONLY the droplet ids that match the names found in avenger_servers variable
- name: "CREATE FACT [matching_droplet_ids_only]"
  set_fact:
    matching_droplet_ids_only: |
      {% set res = [] -%}
      {%- for i in item -%}
        {% if i.name in servers_list_by_name|list %}
          {% set ignored = res.append(i.id) -%}
        {% endif %}
      {%- endfor %}
      {{ res }}
  with_items: "{{ fact_droplet_name_and_id_only}}"
  check_mode: no
  tags:
    - lookup
    - debug
    - do_lookup
    - set_fact

- name: 'PRINT matching_droplet_ids_only'
  debug:
    msg: "{{matching_droplet_ids_only}}"
  tags:
    - lookup
    - debug
    - do_lookup
    - matching_droplet_ids_only

- name: 'PRINT matching_droplet_ids_only by item'
  debug:
    msg: "{{item}}"
  with_items:
  - "{{matching_droplet_ids_only}}"
  tags:
    - lookup
    - debug
    - do_lookup
    - matching_droplet_ids_only

- name: pause to see that everything is good
  pause: minutes=1
  tags:
    - pause
